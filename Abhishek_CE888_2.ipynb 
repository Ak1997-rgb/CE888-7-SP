{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Abhishek_CE888-2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.2"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "1522cbe4dbab4912b016325784aa756b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_410fba1139fb45ff97cee9564d3032d4",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_428be4af841e472085f4c5c355918eab",
              "IPY_MODEL_a8939da5d1e84942af06c2cfa35fca7c"
            ]
          }
        },
        "410fba1139fb45ff97cee9564d3032d4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "428be4af841e472085f4c5c355918eab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_87a67bda45ac4a858078aaec0c703fec",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 898823,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 898823,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f5d68f7f9d3c4ffeb4017318b7c8ebd3"
          }
        },
        "a8939da5d1e84942af06c2cfa35fca7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_62d71c8110184643a1667304812d388e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 899k/899k [00:02&lt;00:00, 353kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c8e7cf016eac4edb979dd61076d2d202"
          }
        },
        "87a67bda45ac4a858078aaec0c703fec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f5d68f7f9d3c4ffeb4017318b7c8ebd3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "62d71c8110184643a1667304812d388e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c8e7cf016eac4edb979dd61076d2d202": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "98c2eceb801d468e83f1478825bf99d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6961b7b98d9d4a339338c5a8b0e57e9f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_230325a3456c45599225637c011d20cf",
              "IPY_MODEL_382d90fc6f8f4ae2bbe2fd1cc04cb20a"
            ]
          }
        },
        "6961b7b98d9d4a339338c5a8b0e57e9f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "230325a3456c45599225637c011d20cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_ab80dfcd8d504692ba9424f3b3bcfb88",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 456318,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 456318,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a03970bf867a40ec970afa2b0726e41b"
          }
        },
        "382d90fc6f8f4ae2bbe2fd1cc04cb20a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_cf95e47184554305897d63359bbf4ea3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 456k/456k [00:01&lt;00:00, 262kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_d6412549874f4cbba9d3b06a1a3dadc9"
          }
        },
        "ab80dfcd8d504692ba9424f3b3bcfb88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a03970bf867a40ec970afa2b0726e41b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "cf95e47184554305897d63359bbf4ea3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "d6412549874f4cbba9d3b06a1a3dadc9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "320e13c2a71244bd86331978ffb920df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_449b4f1a879e4b43bc372b9e86cd9cb6",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_816fec068ab7479fb193d498163e21ff",
              "IPY_MODEL_5b65cd75a1914302b816be94f6a5f926"
            ]
          }
        },
        "449b4f1a879e4b43bc372b9e86cd9cb6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "816fec068ab7479fb193d498163e21ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_f217ccce41ab4c148e55ad6f9e6f9eaf",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1355863,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1355863,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e00acd9d9c304ae29a15db22d5683cfe"
          }
        },
        "5b65cd75a1914302b816be94f6a5f926": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_7b4811a345ca466aa135313d859b003d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 3.11MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ec4c780fdea84c049d9ac1d11ef3b24d"
          }
        },
        "f217ccce41ab4c148e55ad6f9e6f9eaf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e00acd9d9c304ae29a15db22d5683cfe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7b4811a345ca466aa135313d859b003d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ec4c780fdea84c049d9ac1d11ef3b24d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0056011557c348a5bada075064b78ff2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_7dc5335aad304834836ccb918de4497d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_9f9e506369cb47ea85de16d40663fce0",
              "IPY_MODEL_b33612dd5b064a639c910a79f8a75344"
            ]
          }
        },
        "7dc5335aad304834836ccb918de4497d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9f9e506369cb47ea85de16d40663fce0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_5b4abac82c534d46af5d9f672653689d",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 481,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 481,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cd54656740314af69414e71a26bd6607"
          }
        },
        "b33612dd5b064a639c910a79f8a75344": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_da6d0d6cd9644d04ba8e52d196954728",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 481/481 [00:14&lt;00:00, 32.6B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8619ae82c8b8453ba83fa103cc823910"
          }
        },
        "5b4abac82c534d46af5d9f672653689d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cd54656740314af69414e71a26bd6607": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "da6d0d6cd9644d04ba8e52d196954728": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8619ae82c8b8453ba83fa103cc823910": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9e71edc4ef1347dcb316beae127f67c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_dce00d4f918e4a43b9a926452a687230",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_649e45f6147b4118815a9ec67c8aea81",
              "IPY_MODEL_cc0b20bfcf8646e6be8a70cc2c499b00"
            ]
          }
        },
        "dce00d4f918e4a43b9a926452a687230": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "649e45f6147b4118815a9ec67c8aea81": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3a6af1cd7ddf4d60877a3363027ce2b6",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 657434796,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 657434796,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0fed33836b8742fdb7aaa89ba57781d6"
          }
        },
        "cc0b20bfcf8646e6be8a70cc2c499b00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_f07cc7eed5834729b2ef34fd0686de90",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 657M/657M [00:14&lt;00:00, 46.3MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f2bc979842a442ea8532e385ab2cc023"
          }
        },
        "3a6af1cd7ddf4d60877a3363027ce2b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0fed33836b8742fdb7aaa89ba57781d6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f07cc7eed5834729b2ef34fd0686de90": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f2bc979842a442ea8532e385ab2cc023": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ak1997-rgb/CE888-7-SP/blob/main/Abhishek_CE888_2.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "71FeqS8fwa3b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "190bbfc1-750e-462d-e570-301e94d17e87"
      },
      "source": [
        "# Installing Transformers\n",
        "!pip install transformers\n",
        "!pip install emoji\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting transformers\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d8/b2/57495b5309f09fa501866e225c84532d1fd89536ea62406b2181933fb418/transformers-4.5.1-py3-none-any.whl (2.1MB)\n",
            "\u001b[K     |████████████████████████████████| 2.1MB 7.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (20.9)\n",
            "Collecting sacremoses\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/75/ee/67241dc87f266093c533a2d4d3d69438e57d7a90abb216fa076e7d475d4a/sacremoses-0.0.45-py3-none-any.whl (895kB)\n",
            "\u001b[K     |████████████████████████████████| 901kB 28.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n",
            "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (3.10.1)\n",
            "Collecting tokenizers<0.11,>=0.10.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ae/04/5b870f26a858552025a62f1649c20d29d2672c02ff3c3fb4c688ca46467a/tokenizers-0.10.2-cp37-cp37m-manylinux2010_x86_64.whl (3.3MB)\n",
            "\u001b[K     |████████████████████████████████| 3.3MB 41.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.4.1)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2020.12.5)\n",
            "Installing collected packages: sacremoses, tokenizers, transformers\n",
            "Successfully installed sacremoses-0.0.45 tokenizers-0.10.2 transformers-4.5.1\n",
            "Collecting emoji\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/24/fa/b3368f41b95a286f8d300e323449ab4e86b85334c2e0b477e94422b8ed0f/emoji-1.2.0-py3-none-any.whl (131kB)\n",
            "\u001b[K     |████████████████████████████████| 133kB 6.9MB/s \n",
            "\u001b[?25hInstalling collected packages: emoji\n",
            "Successfully installed emoji-1.2.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yRs5EowBRYiA"
      },
      "source": [
        "## Importing modules"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcBPsxmpwa3m",
        "scrolled": true
      },
      "source": [
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer,TfidfTransformer\n",
        "import pandas as pd\n",
        "from pandas import DataFrame\n",
        "import numpy as np\n",
        "import json\n",
        "import spacy \n",
        "import re,string\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Dense,Dropout, Input\n",
        "from tensorflow.keras import regularizers\n",
        "import nltk\n",
        "from nltk import tokenize\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HR_ak3ufwa3n"
      },
      "source": [
        "#  Loding en_core_web_sm\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "st = PorterStemmer()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p0HQYABxwa3n",
        "outputId": "df83ef6b-9e8a-4e80-a02a-a1095ffa7f16"
      },
      "source": [
        "# NLTK comes with many corpora, toy grammars, trained models,\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('punkt')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ou5piuoswa3o"
      },
      "source": [
        "#WordNetLemmatizer for lemmatising the \n",
        "w_tokenizer = nltk.tokenize.WhitespaceTokenizer()\n",
        "lemmatizer = nltk.stem.WordNetLemmatizer()\n",
        "import emoji\n",
        "\n",
        "\n",
        "def lemmatize_text(text):\n",
        "    return [lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(text)]\n",
        "\n",
        "# clean the text dataframe\n",
        "def Clean_dataset(text):\n",
        "  text = text.lower() \n",
        "  text=emoji.get_emoji_regexp().sub(r'',text.encode('latin-1', 'ignore').decode('latin-1')) #removing emojis\n",
        "  text = text.encode(\"ascii\", errors=\"ignore\").decode()#Remove Non ASCII\n",
        "  text = re.sub(r'@[A-Za-z0-9]+','',text) #removes mentions\n",
        "  text = re.sub(r'#','',text)#remove hashtag\n",
        "  text = re.sub(r'RT[\\s]','',text) #remove RT\n",
        "  text = re.sub(r'http?:\\/\\/\\S+','',text) #remove links\n",
        "  text = re.sub(r\"qt\", \"\", text) #Removes qt\n",
        "  text = re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:<>+=-]\", \" \", text)#remove special characters\n",
        "  text = re.sub(r'\\\"','',text) #remove quotes\n",
        "  text = re.sub(r'\\“','',text) #remove quotes\n",
        "  text = re.sub(r'\\”','',text) #remove quotes\n",
        "  tokens = word_tokenize(text) #remove quotes\n",
        "  table = str.maketrans('', '', string.punctuation)\n",
        "  stripped = [w.translate(table) for w in tokens]\n",
        "  words = [word for word in stripped if word.isalpha()]\n",
        "  stop_words = set(stopwords.words(\"english\"))#Remove Stop words\n",
        "  words = [w for w in words if not w in stop_words]\n",
        "  words = ' '.join(words)\n",
        "  words=[lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(words)]\n",
        "  return text"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v7UIzTlpy0wl",
        "outputId": "8704e63f-61da-46f4-e282-287a47f0d29e"
      },
      "source": [
        "#Checking clean_dataset function\n",
        "print(Clean_dataset(\"😇you ðÿðÿ° can make richly interactive plots in just a single function call, including faceting, maps, animations, and trendlines. It comes with on-board datasets, color scales and themes, and just like Plotly.py,\"))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "you  can make richly interactive plots in just a single function call  including faceting  maps  animations  and trendlines  it comes with on board datasets  color scales and themes  and just like plotly py \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWdFCK-dwa3o"
      },
      "source": [
        "# Merging labels and tweets file into one dataframe\n",
        "def dataset_import(path_dataset,path_label):\n",
        "  # load data\n",
        "  cols=['tweet_txt', 'labels'] \n",
        "  df = pd.read_csv(path_dataset, sep =\"\\n\",names=cols,header=None,encoding='utf-8')\n",
        "    # load data label\n",
        "  labels = pd.read_csv(path_label, sep =\"\\n\",header=None)\n",
        "  df['labels']=labels\n",
        "  return df\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PVAIIOeGph-e"
      },
      "source": [
        "# LOAD DATASET\n",
        "# accessing hate data\n",
        "hate_train=dataset_import('/content/drive/MyDrive/datasets/hate/train_text.txt','/content/drive/MyDrive/datasets/hate/train_labels.txt')\n",
        "hate_test=dataset_import('/content/drive/MyDrive/datasets/hate/test_text.txt','/content/drive/MyDrive/datasets/hate/test_labels.txt')\n",
        "hate_val=dataset_import('/content/drive/MyDrive/datasets/hate/val_text.txt','/content/drive/MyDrive/datasets/hate/val_labels.txt')\n",
        "\n",
        "\n",
        "# accessing emotion data\n",
        "emotion_train=dataset_import('/content/drive/MyDrive/datasets/emotion/train_text.txt','/content/drive/MyDrive/datasets/emotion/train_labels.txt')\n",
        "emotion_test=dataset_import('/content/drive/MyDrive/datasets/emotion/test_text.txt','/content/drive/MyDrive/datasets/emotion/test_labels.txt')\n",
        "emotion_val=dataset_import('/content/drive/MyDrive/datasets/emotion/val_text.txt','/content/drive/MyDrive/datasets/emotion/val_labels.txt')\n",
        "\n",
        "\n",
        "# accessing offensive data\n",
        "offensive_train=dataset_import('/content/drive/MyDrive/datasets/offensive/train_text.txt','/content/drive/MyDrive/datasets/offensive/train_labels.txt')\n",
        "offensive_test=dataset_import('/content/drive/MyDrive/datasets/offensive/test_text.txt','/content/drive/MyDrive/datasets/offensive/test_labels.txt')\n",
        "offensive_val=dataset_import('/content/drive/MyDrive/datasets/offensive/val_text.txt','/content/drive/MyDrive/datasets/offensive/val_labels.txt')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "SmCpvTV7aHJV",
        "outputId": "58954298-4e40-406b-a12c-e1e11f51cc97"
      },
      "source": [
        "# Hate dataset analysis label count\n",
        "sns.catplot(x=\"labels\", kind=\"count\",palette=sns.color_palette(['green', 'blue']), data=hate_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f947fc248d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "Ih_Gk3zmt9nz",
        "outputId": "df7d5680-f7b4-43d1-8152-4e3d3f471ad3"
      },
      "source": [
        "# Emotion dataset analysis label count\n",
        "sns.catplot(x=\"labels\", kind=\"count\",palette=sns.color_palette(['green', 'blue','orange','black']), data=emotion_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f947f509150>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "aCNej0cMuCTV",
        "outputId": "2a16f91e-d3ce-4c75-a4cc-daddcb123e28"
      },
      "source": [
        "# offensive dataset analysis label count\n",
        "sns.catplot(x=\"labels\", kind=\"count\", palette=sns.color_palette(['green', 'blue']), data=offensive_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f947f509dd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UuUPJe5rw4Oi",
        "outputId": "20601115-0a6c-4730-d680-6ba41610e2ec"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3R_Jbp4VvTd5"
      },
      "source": [
        "#HATE DATASET "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M0PGiKXnvcUA"
      },
      "source": [
        "# Clean all  on train test validation datasets\n",
        "hate_train['tweet_txt']=hate_train['tweet_txt'].apply(Clean_dataset)\n",
        "hate_val['tweet_txt']=hate_val['tweet_txt'].apply(Clean_dataset)\n",
        "hate_test['tweet_txt']=hate_test['tweet_txt'].apply(Clean_dataset)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KgNvMTg2wul4"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uEOVJhagvS8y"
      },
      "source": [
        "# lemmatization on train test validation datasets\n",
        "from textblob import Word\n",
        "hate_train['tweet_txt'] = hate_train['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "hate_val['tweet_txt'] = hate_val['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "hate_test['tweet_txt'] = hate_test['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r_QBRLk75V-R"
      },
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from nltk.corpus import stopwords\n",
        "# TFIDF vectorization\n",
        "vectorizer = TfidfVectorizer(stop_words=stopwords.words('english'), ngram_range=(1, 3), min_df=10,max_features=215)\n",
        "features_hate_train = vectorizer.fit_transform(hate_train.tweet_txt)\n",
        "features_hate_val = vectorizer.fit_transform(hate_val.tweet_txt)\n",
        "features_hate_test = vectorizer.fit_transform(hate_test.tweet_txt)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UVAaU03XyySx"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4fRxOwXEENk",
        "outputId": "c3a30eda-9d65-410c-a74a-a0e38cd94945"
      },
      "source": [
        "# Building and fitting SVM model\n",
        "from sklearn import svm\n",
        "hate_model = svm.SVC(C=15000.0)\n",
        "hate_model.fit(features_hate_train, hate_train['labels'])\n",
        "hate_model.score(features_hate_val,hate_val['labels'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5176946410515673"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0cXSXrR5FKD7"
      },
      "source": [
        "# Predicting using model\n",
        "pred=hate_model.predict(features_hate_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "huiow-8eDZ2d",
        "outputId": "888a2117-2137-40db-cb31-006cadb2c06b"
      },
      "source": [
        "# EVALUATION REPORT\n",
        "print('Classification Report')\n",
        "from sklearn.metrics import confusion_matrix,f1_score,classification_report\n",
        "print(classification_report(hate_test['labels'],pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Classification Report\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.58      0.63      0.60      1697\n",
            "           1       0.42      0.36      0.39      1235\n",
            "\n",
            "    accuracy                           0.52      2932\n",
            "   macro avg       0.50      0.50      0.49      2932\n",
            "weighted avg       0.51      0.52      0.51      2932\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "EOi_EJStrZxM",
        "outputId": "4910c7c6-ccf5-4f6a-9af3-7f99a30d1bcb"
      },
      "source": [
        "# confusion matrix plotting\n",
        "import matplotlib.pyplot as plt  \n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "# from sklearn.datasets import make_classification\n",
        "# from sklearn.metrics import plot_confusion_matrix\n",
        "cm = confusion_matrix(hate_test['labels'],pred)\n",
        "cmd = ConfusionMatrixDisplay(cm, display_labels=['True','False'])\n",
        "cmd.plot()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f9476f7fc10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V0jmNIhmNmH1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y5fUHMf8N3T1"
      },
      "source": [
        "#Emotion dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xf1YRCEIN0xf"
      },
      "source": [
        "# Clean all  on train test validation datasets\n",
        "emotion_train['tweet_txt']=emotion_train['tweet_txt'].apply(Clean_dataset)\n",
        "emotion_val['tweet_txt']=emotion_val['tweet_txt'].apply(Clean_dataset)\n",
        "emotion_test['tweet_txt']=emotion_test['tweet_txt'].apply(Clean_dataset)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nSi9pKnTN0xi"
      },
      "source": [
        "# lemmatization on train test validation datasets\n",
        "from textblob import Word\n",
        "emotion_train['tweet_txt'] = emotion_train['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "emotion_val['tweet_txt'] = emotion_val['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "emotion_test['tweet_txt'] = emotion_test['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367,
          "referenced_widgets": [
            "1522cbe4dbab4912b016325784aa756b",
            "410fba1139fb45ff97cee9564d3032d4",
            "428be4af841e472085f4c5c355918eab",
            "a8939da5d1e84942af06c2cfa35fca7c",
            "87a67bda45ac4a858078aaec0c703fec",
            "f5d68f7f9d3c4ffeb4017318b7c8ebd3",
            "62d71c8110184643a1667304812d388e",
            "c8e7cf016eac4edb979dd61076d2d202",
            "98c2eceb801d468e83f1478825bf99d8",
            "6961b7b98d9d4a339338c5a8b0e57e9f",
            "230325a3456c45599225637c011d20cf",
            "382d90fc6f8f4ae2bbe2fd1cc04cb20a",
            "ab80dfcd8d504692ba9424f3b3bcfb88",
            "a03970bf867a40ec970afa2b0726e41b",
            "cf95e47184554305897d63359bbf4ea3",
            "d6412549874f4cbba9d3b06a1a3dadc9",
            "320e13c2a71244bd86331978ffb920df",
            "449b4f1a879e4b43bc372b9e86cd9cb6",
            "816fec068ab7479fb193d498163e21ff",
            "5b65cd75a1914302b816be94f6a5f926",
            "f217ccce41ab4c148e55ad6f9e6f9eaf",
            "e00acd9d9c304ae29a15db22d5683cfe",
            "7b4811a345ca466aa135313d859b003d",
            "ec4c780fdea84c049d9ac1d11ef3b24d",
            "0056011557c348a5bada075064b78ff2",
            "7dc5335aad304834836ccb918de4497d",
            "9f9e506369cb47ea85de16d40663fce0",
            "b33612dd5b064a639c910a79f8a75344",
            "5b4abac82c534d46af5d9f672653689d",
            "cd54656740314af69414e71a26bd6607",
            "da6d0d6cd9644d04ba8e52d196954728",
            "8619ae82c8b8453ba83fa103cc823910",
            "9e71edc4ef1347dcb316beae127f67c5",
            "dce00d4f918e4a43b9a926452a687230",
            "649e45f6147b4118815a9ec67c8aea81",
            "cc0b20bfcf8646e6be8a70cc2c499b00",
            "3a6af1cd7ddf4d60877a3363027ce2b6",
            "0fed33836b8742fdb7aaa89ba57781d6",
            "f07cc7eed5834729b2ef34fd0686de90",
            "f2bc979842a442ea8532e385ab2cc023"
          ]
        },
        "id": "O4kpSXygeh49",
        "outputId": "c5a87fc1-a178-4475-a141-2def324c3118"
      },
      "source": [
        "from transformers import RobertaTokenizer, TFRobertaModel\n",
        "\n",
        "# Loading DistilBERT RobertaTokenizer and the DistilBERT model\n",
        "robert_tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
        "robert_model = TFRobertaModel.from_pretrained('roberta-base')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1522cbe4dbab4912b016325784aa756b",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=898823.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "98c2eceb801d468e83f1478825bf99d8",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=456318.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "320e13c2a71244bd86331978ffb920df",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1355863.0, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0056011557c348a5bada075064b78ff2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=481.0, style=ProgressStyle(description_…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9e71edc4ef1347dcb316beae127f67c5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=657434796.0, style=ProgressStyle(descri…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Some layers from the model checkpoint at roberta-base were not used when initializing TFRobertaModel: ['lm_head']\n",
            "- This IS expected if you are initializing TFRobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing TFRobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "All the layers of TFRobertaModel were initialized from the model checkpoint at roberta-base.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFRobertaModel for predictions without further training.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hY9r7y4VrruH"
      },
      "source": [
        "lines=emotion_train['tweet_txt']#storing each text in lines"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UFuuRyP5iahC",
        "outputId": "7ded2458-d611-48b8-a7fd-57dd955f1541"
      },
      "source": [
        "max_len=200 #padding maximum length\n",
        "# roberta Tokenizer\n",
        "dbert_inp=robert_tokenizer.encode_plus(lines[0],add_special_tokens = True,max_length =max_len,pad_to_max_length = True,truncation=True)\n",
        "dbert_inp\n",
        "\n",
        "id_inp=np.asarray(dbert_inp['input_ids'])\n",
        "mask_inp=np.asarray(dbert_inp['attention_mask'])\n",
        "out=robert_model([id_inp.reshape(1,-1),mask_inp.reshape(1,-1)])\n",
        "# type(out),out\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EMwaSBo54LKe",
        "outputId": "d4e09e68-439b-48c3-afd8-3958463a0613"
      },
      "source": [
        "\n",
        "input_ids=[]\n",
        "attention_masks=[]\n",
        "# Tokenizing whole dataset\n",
        "for line in lines:\n",
        "  dbert_inps=robert_tokenizer.encode_plus(line,add_special_tokens = True,max_length =max_len,pad_to_max_length = True,return_attention_mask = True,truncation=True)\n",
        "  input_ids.append(dbert_inps['input_ids'])\n",
        "  attention_masks.append(dbert_inps['attention_mask'])\n",
        "input_ids=np.array(input_ids) \n",
        "attention_masks=np.array(attention_masks)\n",
        "labels=np.array(emotion_train['labels'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mjF_yHlO1uJL",
        "outputId": "2827bbb8-3927-414d-a202-ad77dc72557b"
      },
      "source": [
        "lines_val=emotion_val['tweet_txt']#storing each text in lines\n",
        "input_ids_val=[]\n",
        "attention_masks_val=[]\n",
        "# Tokenizing whole dataset\n",
        "for line in lines_val:\n",
        "  dbert_inps_val=robert_tokenizer.encode_plus(line,add_special_tokens = True,max_length =max_len,pad_to_max_length = True,return_attention_mask = True,truncation=True)\n",
        "  input_ids_val.append(dbert_inps_val['input_ids'])\n",
        "  attention_masks_val.append(dbert_inps_val['attention_mask'])\n",
        "input_ids_val=np.array(input_ids_val) \n",
        "attention_masks_val=np.array(attention_masks_val)\n",
        "labels_val=np.array(emotion_val['labels'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fhr5lmFqrcJD"
      },
      "source": [
        "# Create model fuction to predict emotion dataset\n",
        "def Model_roberta():\n",
        "    input = Input(shape = (max_len,), dtype='int64')\n",
        "    masked= Input(shape = (max_len,), dtype='int64')\n",
        "    roberta_layer = robert_model(input, attention_mask=masked)[0][:,0,:]\n",
        "    dense = Dense(512,activation='relu',kernel_regularizer=regularizers.l2(0.01))(roberta_layer)\n",
        "    dropout= Dropout(0.5)(dense)\n",
        "    pred = Dense(4, activation='softmax',kernel_regularizer=regularizers.l2(0.01))(dropout)\n",
        "    models = tf.keras.Model(inputs=[input,masked], outputs=pred)\n",
        "    print(models.summary())\n",
        "    return models\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bNj_HS6jlOu7",
        "outputId": "64f0718b-fea3-4b56-e5f8-5532ded6d4ba"
      },
      "source": [
        "# call the roberta model\n",
        "emotion_model=Model_roberta()\n",
        "\n",
        "loss = tf.keras.losses.SparseCategoricalCrossentropy()\n",
        "metric = tf.keras.metrics.SparseCategoricalAccuracy('accuracy')\n",
        "optimizer = tf.keras.optimizers.Adam(learning_rate=3e-5)\n",
        "\n",
        "emotion_model.compile(loss=loss,optimizer=optimizer, metrics=[metric])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:AutoGraph could not transform <bound method Socket.send of <zmq.sugar.socket.Socket object at 0x7f94daef5d70>> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING: AutoGraph could not transform <bound method Socket.send of <zmq.sugar.socket.Socket object at 0x7f94daef5d70>> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING:tensorflow:AutoGraph could not transform <function wrap at 0x7f94f679dc20> and will run it as-is.\n",
            "Cause: while/else statement not yet supported\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING: AutoGraph could not transform <function wrap at 0x7f94f679dc20> and will run it as-is.\n",
            "Cause: while/else statement not yet supported\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 200)]        0                                            \n",
            "__________________________________________________________________________________________________\n",
            "input_2 (InputLayer)            [(None, 200)]        0                                            \n",
            "__________________________________________________________________________________________________\n",
            "tf_roberta_model (TFRobertaMode TFBaseModelOutputWit 124645632   input_1[0][0]                    \n",
            "                                                                 input_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.getitem (Slici (None, 768)          0           tf_roberta_model[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "dense (Dense)                   (None, 512)          393728      tf.__operators__.getitem[0][0]   \n",
            "__________________________________________________________________________________________________\n",
            "dropout_37 (Dropout)            (None, 512)          0           dense[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "dense_1 (Dense)                 (None, 4)            2052        dropout_37[0][0]                 \n",
            "==================================================================================================\n",
            "Total params: 125,041,412\n",
            "Trainable params: 125,041,412\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4N9chs3luBuZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db7bd574-4666-404c-96d8-965adc8ac05c"
      },
      "source": [
        "labels_val.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(374,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "mwNz23-a-EVG",
        "outputId": "72a35408-8f1e-4a58-9956-6089e3f3b011"
      },
      "source": [
        "# Training Model\n",
        "labels_valhistory_model=emotion_model.fit([input_ids,attention_masks],labels,batch_size=16,epochs=4,validation_data=([input_ids_val,attention_masks_val],labels_val))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/4\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "WARNING:tensorflow:Gradients do not exist for variables ['tf_roberta_model/roberta/pooler/dense/kernel:0', 'tf_roberta_model/roberta/pooler/dense/bias:0'] when minimizing the loss.\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "WARNING:tensorflow:Gradients do not exist for variables ['tf_roberta_model/roberta/pooler/dense/kernel:0', 'tf_roberta_model/roberta/pooler/dense/bias:0'] when minimizing the loss.\n",
            "  3/204 [..............................] - ETA: 1:12:41 - loss: 7.7663 - accuracy: 0.2778"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-38-3a2d1d097820>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Training Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlabels_valhistory_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0memotion_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0minput_ids\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mattention_masks\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0minput_ids_val\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mattention_masks_val\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabels_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YrJ7Fg3k33dL"
      },
      "source": [
        "##preparing emotion test dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZdCrN3Fb32tM"
      },
      "source": [
        "lines_test=emotion_test['tweet_txt']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RROV5cKN47_D",
        "outputId": "d8c7f553-73f8-452f-b787-e07ac02ac8ce"
      },
      "source": [
        "max_len=200\n",
        "# Tokenization and padding using roberta tokenizer\n",
        "dbert_inp_test=robert_tokenizer.encode_plus(lines_test[0],add_special_tokens = True,max_length =max_len,pad_to_max_length = True,truncation=True)\n",
        "dbert_inp_test\n",
        "id_inp=np.asarray(dbert_inp_test['input_ids'])\n",
        "mask_inp=np.asarray(dbert_inp_test['attention_mask'])\n",
        "out=robert_model([id_inp.reshape(1,-1),mask_inp.reshape(1,-1)])\n",
        "# type(out),out\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eGlJrTXz47_F",
        "outputId": "3813c70b-0af0-4ca7-f232-cf77729bb1ac"
      },
      "source": [
        "input_ids_test=[]\n",
        "attention_masks_test=[]\n",
        "# Tokenization and padding using roberta tokenizer\n",
        "for line in lines_test:\n",
        "  dbert_inps_test=robert_tokenizer.encode_plus(line,add_special_tokens = True,max_length =max_len,pad_to_max_length = True,return_attention_mask = True,truncation=True)\n",
        "  input_ids_test.append(dbert_inps_test['input_ids'])\n",
        "  attention_masks_test.append(dbert_inps_test['attention_mask'])\n",
        "input_ids_test=np.array(input_ids_test) \n",
        "attention_masks_test=np.array(attention_masks_test)\n",
        "labels_test=np.array(emotion_test['labels'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "HNqfbeqp5pH-",
        "outputId": "d1612874-79fe-44fd-d924-f9a85b8de0de"
      },
      "source": [
        "# Predicting targets\n",
        "pred=emotion_model.predict([input_ids_test,attention_masks_test]) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-3549b7a4f079>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpred\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0memotion_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0minput_ids_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mattention_masks_test\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'emotion_model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PcMg6wFy6Zjn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "outputId": "4467235e-bed8-4e7f-f6cd-60f100688241"
      },
      "source": [
        "# EVALUATION Accuracy Score\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(labels_test, np.argmax(pred, axis=1))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-52-196f1cc78db5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# EVALUATION Accuracy Score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'labels_test' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tsv6cf43m6G1",
        "outputId": "f7b250a3-0c49-4744-d68c-c4b34b1a7e64"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.75"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-p6YIjsa6jFK"
      },
      "source": [
        "#Offensive DATASET "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JfnII-Lx6jFM"
      },
      "source": [
        "# Clean all  on train test validation datasets\n",
        "offensive_train['tweet_txt']=offensive_train['tweet_txt'].apply(Clean_dataset)\n",
        "offensive_val['tweet_txt']=offensive_val['tweet_txt'].apply(Clean_dataset)\n",
        "offensive_test['tweet_txt']=offensive_test['tweet_txt'].apply(Clean_dataset)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y_TQf5hk6jFP"
      },
      "source": [
        "# lemmatization on train test validation datasets\n",
        "from textblob import Word\n",
        "offensive_train['tweet_txt'] = offensive_train['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "offensive_val['tweet_txt'] = offensive_val['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "offensive_test['tweet_txt'] = offensive_test['tweet_txt'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "66fiEcet6jFQ"
      },
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from nltk.corpus import stopwords\n",
        "# TFIDF vectorization\n",
        "vectorizer = TfidfVectorizer(stop_words=stopwords.words('english'), ngram_range=(1, 3), min_df=10,max_features=140)\n",
        "features_offensive_train = vectorizer.fit_transform(offensive_train.tweet_txt)\n",
        "features_offensive_val = vectorizer.fit_transform(offensive_val.tweet_txt)\n",
        "features_offensive_test = vectorizer.fit_transform(offensive_test.tweet_txt)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ubqZ18tP6jFR"
      },
      "source": [
        "# # Building and Training Logistic Regression MODEL\n",
        "\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "# all parameters not specified are set to their defaults\n",
        "logisticRegr = LogisticRegression(C=100,penalty='l2',solver='newton-cg')\n",
        "logisticRegr.fit(features_offensive_train, offensive_train['labels'])\n",
        "logisticRegr.score(features_offensive_val,offensive_val['labels'])\n",
        "pred=logisticRegr.predict(features_offensive_test)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "czpHKq-36jFS"
      },
      "source": [
        "# Predicting using Model\n",
        "pred_offensive=logisticRegr.predict(features_offensive_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FtaOiXFs6jFS",
        "outputId": "d211e614-87b7-4166-b579-3161f6eec6db"
      },
      "source": [
        "print('Classification Report')\n",
        "from sklearn.metrics import confusion_matrix,f1_score,classification_report\n",
        "print(classification_report(offensive_test['labels'],np.argmax(pred_offensive, axis=1)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Classification Report\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.90      0.81       620\n",
            "           1       0.44      0.20      0.28       240\n",
            "\n",
            "    accuracy                           0.70       860\n",
            "   macro avg       0.59      0.55      0.55       860\n",
            "weighted avg       0.66      0.70      0.66       860\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hi17Iur-9YVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "419aa508-a7af-4ac6-f2dd-a52c809580f7"
      },
      "source": [
        "# example of grid searching key hyperparametres for logistic regression\n",
        "from sklearn.datasets import make_blobs\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "# define models and parameters\n",
        "model = LogisticRegression()\n",
        "solvers = ['newton-cg', 'lbfgs', 'liblinear']\n",
        "penalty = ['l2']\n",
        "c_values = [100, 10, 1.0, 0.1, 0.01]\n",
        "# define grid search\n",
        "grid = dict(solver=solvers,penalty=penalty,C=c_values)\n",
        "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
        "grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\n",
        "grid_result = grid_search.fit(features_offensive_train, offensive_train['labels'])\n",
        "# summarize results\n",
        "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
        "means = grid_result.cv_results_['mean_test_score']\n",
        "stds = grid_result.cv_results_['std_test_score']\n",
        "params = grid_result.cv_results_['params']\n",
        "for mean, stdev, param in zip(means, stds, params):\n",
        "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best: 0.710418 using {'C': 10, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.710026 (0.008570) with: {'C': 100, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.710026 (0.008570) with: {'C': 100, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
            "0.710026 (0.008570) with: {'C': 100, 'penalty': 'l2', 'solver': 'liblinear'}\n",
            "0.710418 (0.008488) with: {'C': 10, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.710390 (0.008458) with: {'C': 10, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
            "0.710418 (0.008488) with: {'C': 10, 'penalty': 'l2', 'solver': 'liblinear'}\n",
            "0.710222 (0.007408) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.710222 (0.007408) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
            "0.710222 (0.007408) with: {'C': 1.0, 'penalty': 'l2', 'solver': 'liblinear'}\n",
            "0.707425 (0.006692) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.707453 (0.006703) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
            "0.707425 (0.006730) with: {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
            "0.672625 (0.002280) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'newton-cg'}\n",
            "0.672625 (0.002280) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'lbfgs'}\n",
            "0.672905 (0.002120) with: {'C': 0.01, 'penalty': 'l2', 'solver': 'liblinear'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ObxZf3YvMQNZ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "As0BKwbpEY9D"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}